import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from keyboards import get_main_keyboard, get_orders_keyboard, get_stars_keyboard
from utils import (
    get_order_by_bot_code_or_phone,
    get_status_text,
    get_track_text,
    get_orders,
    save_review_to_crm
)
from auth_db import save_user_auth, get_order_id_by_user_id

TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_USERNAME = os.environ.get("ADMIN_USERNAME", "@Vodyanoy_Dmitriy")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class Form(StatesGroup):
    awaiting_bot_code = State()
    awaiting_review_text = State()

async def safe_answer(message: types.Message, text: str, **kwargs):
    try:
        await message.answer(text, **kwargs)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    existing_order_id = get_order_id_by_user_id(message.from_user.id)
    if existing_order_id:
        await state.update_data(order_id=existing_order_id)
        await safe_answer(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        await state.set_data({"attempts": 0})
        await safe_answer(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Missis S‚ÄôUzi ‚Äî –≤–∞—à–∞ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(Form.awaiting_bot_code)

@router.message(Form.awaiting_bot_code, F.text)
async def code_handler(message: types.Message, state: FSMContext):
    code_or_phone = message.text.strip()
    data = await state.get_data()
    attempts = data.get("attempts", 0) + 1

    order = get_order_by_bot_code_or_phone(code_or_phone)
    if order:
        order_id = order["id"]
        await state.update_data(order_id=order_id)
        save_user_auth(message.from_user.id, order_id)
        await safe_answer(message, f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–∫–∞–∑ <b>{order['number']}</b> –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=get_main_keyboard())
        await state.clear()
    else:
        if attempts < 3:
            await state.update_data(attempts=attempts)
            await safe_answer(message, "‚ùå –£–≤—ã, —è –Ω–µ –Ω–∞—à–ª–∞ –∑–∞–∫–∞–∑ –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚Äî —è —Ä—è–¥–æ–º ‚ù§Ô∏è")
        else:
            await safe_answer(message, "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ üòî –ù–∞–≤–µ—Ä–Ω—è–∫–∞ –µ—Å—Ç—å –≤–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —ç—Ç–∏–º —Ä–∞–∑–±–µ—Ä—É—Å—å. –ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É <b>–ü–æ–º–æ—á—å</b> ‚Äî –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É –∏—Å–∫–∞—Ç—å —Å–ø–æ—Å–æ–± –í–∞–º –ø–æ–º–æ—á—å ü§ç", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ü–æ–º–æ—á—å", callback_data="help")]]))

@router.callback_query(F.data == "help")
async def handle_help(callback: types.CallbackQuery):
    await safe_answer(callback.message, "–°–ø–∞—Å–∏–±–æ! –Ø —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ ü§ç")
    try:
        await bot.send_message(ADMIN_USERNAME, f"üÜò –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username} (ID: {callback.from_user.id})")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

@router.callback_query(F.data == "status")
async def status_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = get_status_text(data.get("order_id"))
    await safe_answer(callback.message, text)

@router.callback_query(F.data == "track")
async def track_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = get_track_text(data.get("order_id"))
    await safe_answer(callback.message, text)

@router.callback_query(F.data == "orders")
async def orders_menu(callback: types.CallbackQuery):
    await safe_answer(callback.message, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=get_orders_keyboard())

@router.callback_query(F.data == "orders_active")
async def active_orders(callback: types.CallbackQuery):
    text = get_orders(active=True)
    await safe_answer(callback.message, text)

@router.callback_query(F.data == "orders_past")
async def past_orders(callback: types.CallbackQuery):
    text = get_orders(active=False)
    await safe_answer(callback.message, text)

@router.callback_query(F.data == "rate")
async def rate_order(callback: types.CallbackQuery):
    await safe_answer(callback.message, "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ 5-–∑–≤—ë–∑–¥–æ—á–Ω–æ–π —à–∫–∞–ª–µ?", reply_markup=get_stars_keyboard())

@router.callback_query(F.data.in_(["‚≠ê1", "‚≠ê2", "‚≠ê3", "‚≠ê4", "‚≠ê5"]))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = callback.data[-1]
    await safe_answer(callback.message, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} ‚≠êÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ –¥–ª—è <b>–º–µ–Ω—è</b>. –Ø –≤—Å—ë —á–∏—Ç–∞—é —Å–∞–º–∞, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ üíå")
    await state.set_state(Form.awaiting_review_text)

@router.message(Form.awaiting_review_text, F.text)
async def handle_review(message: types.Message, state: FSMContext):
    data = await state.get_data()
    save_review_to_crm(data.get("order_id"), message.text)
    await safe_answer(message, "–°–ø–∞—Å–∏–±–æ! –Ø –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—É –∏ —É—á—Ç—É ‚Äî –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Ä–∞—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ üíå")
    await state.clear()

@router.callback_query(F.data == "support")
async def support_handler(callback: types.CallbackQuery):
    await safe_answer(callback.message, "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è —Ä—è–¥–æ–º ü§ó –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî —è —É–∂–µ –≥–æ—Ç–æ–≤–ª—é –ø–æ–º–æ—â—å ‚ú®")
    try:
        await bot.send_message(ADMIN_USERNAME, f"üì• –ó–∞–ø—Ä–æ—Å –æ—Ç @{callback.from_user.username} ({callback.from_user.id})")
    except:
        pass

dp.include_router(router)

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 3000)))